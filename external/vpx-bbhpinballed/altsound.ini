; ----------------------------------------------------------------------------
; altsound.ini - Configuration file for all AltSound formats
;
; If this file does not already exist, it is created automatically the first
; time a table configured for AltSound is launched
; ----------------------------------------------------------------------------
; record_sound_cmds : records all received sound commands and relative
;                     playback times. This can be useful for testing altsound
;                     sample combinations without having to recreate them on
;                     the table. The file can also be edited or created by hand
;                     to create custom testing scenarios. The
;                     "cmdlog.txt" file is created in the "tables"
;                     folder. This feature is turned off by default
;
; rom_volume_ctrl   : the AltSound processor attempts to recreate original
;                     playback behavior using commands sent from the ROM.
;                     This does not work in all cases, resulting in undesirable
;                     muting of the playback volume. Setting this variable
;                     to 0 turns this feature off.
;                     NOTE: This option works for all AltSound formats
;
; cmd_skip_count    : some ROMs send out spurious commands during initialization
;                     which match valid runtime commands.  In this case, it is not
;                     desirable to output sound, but want to allow later instances
;                     to play normally.  This variable allows AltSound authors to
;                     specify how many initial commands to ignore at startup.
;                     NOTE:  If the record_sound_cmds flag is set, the skipped
;                     commands will be included in the recording file.
; ----------------------------------------------------------------------------

[system]
record_sound_cmds = 0
rom_volume_ctrl = 0
cmd_skip_count = 0

; ----------------------------------------------------------------------------
; There are three supported AltSound formats:
;  1. Legacy
;  2. AltSound
;  3. G-Sound
;
; Legacy   : the original AltSound format that parses a file/folder structure
;            similar to the PinSound system. It is no longer used for new
;            AltSound packages
;
; AltSound : a CSV-based format designed as a replacement for the PinSound
;            format. This format defines samples according to "channels" with
;            loosely defined behaviors controlled by the associated metadata
;            "gain", "ducking", "stop", and "loop" fields. This is the format
;            currently used by most AltSound authors
;
; G-Sound  : a new CSV-based format that defines samples according to
;            contextual types, allowing for more intuitively designed AltSound
;            packages. General playback behavior is dictated by the assigned
;            type. Behaviors can evolve without the need for adding
;            additional CSV fields, and the combinatorial complexity that
;            comes with it.
;            NOTE: This option requires the new g-sound.csv format
; ----------------------------------------------------------------------------

[format]
format = altsound

; ----------------------------------------------------------------------------
; To facilitate troubleshooting, the AltSound processor logs events to the
; "altsound.log" file, which can be found in the "tables" folder. There
; are 4 logging levels:
; 1. Info
; 2. Error
; 3. Warning
; 4. Debug
;
; Setting a logging level will also include lower-ordered logging as well.  For
; example, setting logging level to "Warning" will also enable "Info" and
; "Error" logging.  By default, logging is set to "Error" which will also
; include "Info" log messages.  The log file will be overwritten each time a
; new table is loaded.
; ----------------------------------------------------------------------------

[logging]
logging_level = Debug

; ----------------------------------------------------------------------------
; The section below allows for tailoring of the G-Sound behaviors.
;
; The G-Sound format supports the following sample types:
;
; - MUSIC   : background music. Only one can play at a time
; - CALLOUT : voice interludes and callouts. Only one can play at a time
; - SFX     : short sounds to supplement table sounds. Multiple can play at a time
; - SOLO    : sound played at end-of-ball/game, or tilt. Only one can play at a time
; - OVERLAY : sounds played over music/sfx. Only one can play at a time
;
; G - Sound sample types have built-in behaviors. Some can be user-modified.
; Where available, the adjustable variables are:
;
; ducks           : specify which sample types are ducked
; pauses          : specify which sample types are paused
; stops           : specify which sample types are stopped
; group_vol       : relative group volume for sample type
; ducking_profile : relative ducking volumes for specified sample types
;
; NOTES
; - a sample type cannot duck/pause another sample of the same type
; - a stopped sample cannot be resumed/restarted
; - ducking values are specified as a percentage of the gain of the
;   affected sample type(s). Values range from 0 to 100 where
;   0 completely mutes the sample, and 100 effectively negates ducking
; - if multiple ducking values apply to a single sample, the lowest
;   ducking value is used. When the sample with the lowest duck value ends,
;   the next lowest duck value is used, and so on, until all affecting samples
;   have ended.
; - ducking/pausing ends when the last affecting sample that set it has ended
; - If "ducks" variable is set, there must be at least one ducking_profile
;   defined
; ----------------------------------------------------------------------------

[music]
group_vol = 100

[callout]
ducks = sfx, music, overlay
pauses =
stops =
group_vol = 100

[callout_ducking_profiles]
;profile0 is reserved
ducking_profile1 = sfx:65, music:50, overlay:50

[sfx]
ducks = music
group_vol = 100

[sfx_ducking_profiles]
;profile0 is reserved
ducking_profile1 = music:50

[solo]
stops = music, overlay, callout
group_vol = 100

[overlay]
ducks = music, sfx
group_vol = 100

[overlay_ducking_profiles]
;profile0 is reserved
ducking_profile1 = sfx:65, music:65
ducking_profile2 = sfx:80, music:50
